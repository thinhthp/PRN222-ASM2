@page "/UserNotificationThinhThps/UserNotificationThinhThpList"
@using Microsoft.Extensions.DependencyInjection
@using zQuitSmoking.Repositories.ThinhTHP.Models
@using zQuitSmoking.BlazorWebApp.ThinhTHP.Components.Shared
@using Microsoft.AspNetCore.Components.Web

<h3>User Notification List</h3>

<div class="d-flex justify-content-between mb-3">
    <div>
        <a href="/UserNotificationThinhThps/UserNotificationThinhThpForm" class="btn btn-sm btn-primary">Create new</a>
        <!-- Search fields start -->
        <input class="form-control d-inline-block mx-1" style="width: 180px;" placeholder="Message"
               @bind="searchMessage" @bind:event="oninput" />
        <input class="form-control d-inline-block mx-1" style="width: 150px;" placeholder="Response"
               @bind="searchResponse" @bind:event="oninput" />
        <input class="form-control d-inline-block mx-1" style="width: 100px;" placeholder="Username"
               @bind="searchUserNameString" @bind:event="oninput" />
        <button class="btn btn-sm btn-success mx-1" @onclick="SearchNotifications">Search</button>
        <!-- Added for paging -->
        <button class="btn btn-sm btn-success mx-1" @onclick="SearchWithPaging">Search with Paging</button>
        <button class="btn btn-sm btn-secondary" @onclick="ResetSearch">Reset</button>
        <!-- Search fields end -->
    </div>
</div>

@if (userNotifications == null)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 50vh;">
        <Hampster />
        <Hampster />
        <Hampster />
        <Hampster />
        <Hampster />
    </div>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>User</th>
                <th>Notification</th>
                <th>Sent Date</th>
                <th>Read</th>
                <th>Response</th>
                <th>Status</th>
                <th>Attempt Count</th>
                <th>Last Attempt</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var un in userNotifications)
            {
                <tr>
                    <td>@un.UserNotificationThinhThpid</td>
                    <td>@(un.UserAccount?.UserName ?? $"ID: {un.UserAccountId}")</td>
                    <td>@(un.NotificationThinhThp?.Message ?? $"ID: {un.NotificationThinhThpid}")</td>
                    <td>@(un.SentDate?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")</td>
                    <td>@(un.IsRead == true ? "Yes" : "No")</td>
                    <td>@(string.IsNullOrEmpty(un.Response) ? "N/A" : un.Response)</td>
                    <td>@(string.IsNullOrEmpty(un.Status) ? "N/A" : un.Status)</td>
                    <td>@(un.AttemptCount ?? 0)</td>
                    <td>@(un.LastAttemptDate?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")</td>
                    <td>
                        <div class="btn-group">
                            <a href="/UserNotificationThinhThps/UserNotificationThinhThpDetail/@un.UserNotificationThinhThpid" class="btn btn-sm btn-primary">Detail</a>
                            <a href="/UserNotificationThinhThps/UserNotificationThinhThpForm/@un.UserNotificationThinhThpid" class="btn btn-sm btn-warning">Edit</a>
                            <button type="button" class="btn btn-danger" @onclick="() => ConfirmDelete(un.UserNotificationThinhThpid)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <!-- Added for paging -->
    @if (isPaginated)
    {
        <div class="d-flex justify-content-between mt-3">
            <button class="btn btn-sm btn-secondary" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
            <span>Page @currentPage of @TotalPages</span>
            <button class="btn btn-sm btn-secondary" @onclick="NextPage" disabled="@(currentPage == TotalPages)">Next</button>
        </div>
    }
}

@code {
    private List<UserNotificationThinhThp> userNotifications;

    // Search fields
    private string searchMessage = "";
    private string searchResponse = "";
    private string searchUserNameString = "";

    // Added for paging
    private bool isPaginated = false;
    private int currentPage = 1;
    private int totalCount = 0;
    private const int pageSize = 3;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);
        await FetchNotifications();
    }

    private async Task ConfirmDelete(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this notification?");
        if (confirmed)
        {
            await DeleteUserNotification(id);
        }
    }

    private async Task DeleteUserNotification(int id)
    {
        if (await ServiceProviders.UserNotificationThinhThpService.DeleteAsync(id))
        {
            await FetchNotifications(); // Refresh based on current search and paging state
        }
        else
        {
            Console.WriteLine("Failed to delete user notification.");
        }
    }

    // Modified for paging
    private async Task SearchNotifications()
    {
        isPaginated = false;
        await FetchNotifications();
    }

    // Added for paging
    private async Task SearchWithPaging()
    {
        isPaginated = true;
        currentPage = 1;
        await FetchNotifications();
    }

    // Added for paging
    private async Task FetchNotifications()
    {
        var (items, count) = await ServiceProviders.UserNotificationThinhThpService.SearchAsync(
            searchMessage ?? string.Empty,
            searchResponse ?? string.Empty,
            searchUserNameString ?? string.Empty,
            isPaginated ? currentPage : (int?)null,
            isPaginated ? pageSize : (int?)null
        );
        userNotifications = items;
        totalCount = count;
        StateHasChanged();
    }

    // Modified for paging
    private async Task ResetSearch()
    {
        searchMessage = "";
        searchResponse = "";
        searchUserNameString = "";
        isPaginated = false;
        currentPage = 1;
        await FetchNotifications();
    }

    // Added for paging
    private int TotalPages => (int)Math.Ceiling((double)totalCount / pageSize);

    // Added for paging
    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await FetchNotifications();
        }
    }

    // Added for paging
    private async Task NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
            await FetchNotifications();
        }
    }
}