@page "/UserNotificationThinhThps/UserNotificationThinhThpList"
@using Microsoft.Extensions.DependencyInjection
@using zQuitSmoking.Repositories.ThinhTHP.Models
@using zQuitSmoking.BlazorWebApp.ThinhTHP.Components.Shared
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>User Notification List</h3>

<div class="d-flex justify-content-between mb-3">
	<div>
		<a href="/UserNotificationThinhThps/UserNotificationThinhThpForm" class="btn btn-sm btn-primary">Create new</a>
	</div>
</div>

@if (userNotifications == null)
{
	<div class="d-flex justify-content-center align-items-center" style="min-height: 50vh;">
		<Hampster />
		<Hampster />
		<Hampster />
		<Hampster />
		<Hampster />
	</div>
}
else
{
	<table class="table table-striped table-hover">
		<thead>
			<tr>
				<th>ID</th>
				<th>User</th>
				<th>Notification</th>
				<th>Sent Date</th>
				<th>Read</th>
				<th>Response</th>
				<th>Status</th>
				<th>Attempt Count</th>
				<th>Last Attempt</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var un in userNotifications)
			{
				<tr>
					<td>@un.UserNotificationThinhThpid</td>
					<td>@(un.UserAccount?.UserName ?? $"ID: {un.UserAccountId}")</td>
					<td>@(un.NotificationThinhThp?.Message ?? $"ID: {un.NotificationThinhThpid}")</td>
					<td>@(un.SentDate?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")</td>
					<td>@(un.IsRead == true ? "Yes" : "No")</td>
					<td>@(string.IsNullOrEmpty(un.Response) ? "N/A" : un.Response)</td>
					<td>@(string.IsNullOrEmpty(un.Status) ? "N/A" : un.Status)</td>
					<td>@(un.AttemptCount ?? 0)</td>
					<td>@(un.LastAttemptDate?.ToString("yyyy-MM-dd HH:mm") ?? "N/A")</td>
					<td>
						<div class="btn-group">
							<a href="/UserNotificationThinhThps/UserNotificationThinhThpDetail/@un.UserNotificationThinhThpid" class="btn btn-sm btn-primary">Detail</a>
							<a href="/UserNotificationThinhThps/UserNotificationThinhThpForm/@un.UserNotificationThinhThpid" class="btn btn-sm btn-warning">Edit</a>
							<button type="button" class="btn btn-danger" @onclick="() => ConfirmDelete(un.UserNotificationThinhThpid)">Delete</button>
						</div>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<UserNotificationThinhThp> userNotifications;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(2000);
		userNotifications = await ServiceProviders.UserNotificationThinhThpService.GetAllAsync();
	}

	private async Task ConfirmDelete(int id)
	{
		bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this notification?");
		if (confirmed)
		{
			await DeleteUserNotification(id);
		}
	}

	private async Task DeleteUserNotification(int id)
	{
		if (await ServiceProviders.UserNotificationThinhThpService.DeleteAsync(id))
		{
			userNotifications = await ServiceProviders.UserNotificationThinhThpService.GetAllAsync();
			StateHasChanged();
		}
		else
		{
			// Handle error case
			Console.WriteLine("Failed to delete user notification.");
		}
	}
}
