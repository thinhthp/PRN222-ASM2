@page "/UserNotificationThinhThps/UserNotificationThinhThpDetail/{UserNotificationThinhThpid:int}"
@using zQuitSmoking.BlazorWebApp.ThinhTHP.Components.Shared
@using zQuitSmoking.Repositories.ThinhTHP.Models


<h3>UserNotificationThinhThpDetail</h3>
@if (un == null)
{
	<div class="d-flex justify-content-center align-items-center" style="min-height: 50vh;">
		<Hampster />
		<Hampster />
		<Hampster />
		<Hampster />
		<Hampster />
	</div>
}
else
{
	<div class="card">
		<div class="card-body">
			<dl class="row">
				<dt class="col-sm-3">ID</dt>
				<dd class="col-sm-9">@un.UserNotificationThinhThpid</dd>

				<dt class="col-sm-3">User</dt>
				<dd class="col-sm-9">@((un.UserAccount?.UserName) ?? $"ID: {un.UserAccountId}")</dd>

				<dt class="col-sm-3">Notification</dt>
				<dd class="col-sm-9">@((un.NotificationThinhThp?.Message) ?? $"ID: {un.NotificationThinhThpid}")</dd>

				<dt class="col-sm-3">Sent Date</dt>
				<dd class="col-sm-9">@((un.SentDate?.ToString("yyyy-MM-dd HH:mm")) ?? "N/A")</dd>

				<dt class="col-sm-3">Read</dt>
				<dd class="col-sm-9">@((un.IsRead == true) ? "Yes" : "No")</dd>

				<dt class="col-sm-3">Response</dt>
				<dd class="col-sm-9">@(!string.IsNullOrEmpty(un.Response) ? un.Response : "N/A")</dd>

				<dt class="col-sm-3">Status</dt>
				<dd class="col-sm-9">@(!string.IsNullOrEmpty(un.Status) ? un.Status : "N/A")</dd>

				<dt class="col-sm-3">Attempt Count</dt>
				<dd class="col-sm-9">@((un.AttemptCount ?? 0))</dd>

				<dt class="col-sm-3">Last Attempt</dt>
				<dd class="col-sm-9">@((un.LastAttemptDate?.ToString("yyyy-MM-dd HH:mm")) ?? "N/A")</dd>
			</dl>
			<div class="btn-group">
				<a href="/UserNotificationThinhThps/UserNotificationThinhThpForm/@un.UserNotificationThinhThpid" class="btn btn-sm btn-warning d-flex justify-content-center align-items-center">Edit</a>
				<button type="button" class="btn btn-danger" @onclick="() => ConfirmDelete(UserNotificationThinhThpId)">Delete</button>
			</div>
		</div>
	</div>
}
@code {
	[Parameter]
	public int UserNotificationThinhThpId { get; set; }

	private UserNotificationThinhThp un;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(2000);
		un = await ServiceProviders.UserNotificationThinhThpService.GetByIdAsync(UserNotificationThinhThpId);
	}






	private async Task ConfirmDelete(int id)
	{
		bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this notification?");
		if (confirmed)
		{
			await DeleteUserNotification(id);
		}
	}

	private async Task DeleteUserNotification(int id)
	{
		if (await ServiceProviders.UserNotificationThinhThpService.DeleteAsync(id))
		{
			NavigationManager.NavigateTo("/UserNotificationThinhThps/UserNotificationThinhThpList");
		}
		else
		{
			// Handle error case
			Console.WriteLine("Failed to delete user notification.");
		}
	}
}
